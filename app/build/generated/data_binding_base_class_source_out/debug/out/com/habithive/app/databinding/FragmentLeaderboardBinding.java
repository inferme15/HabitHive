// Generated by view binder compiler. Do not edit!
package com.habithive.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.tabs.TabLayout;
import com.habithive.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLeaderboardBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cardHeader;

  @NonNull
  public final Guideline guideline;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView recyclerLeaderboard;

  @NonNull
  public final SwipeRefreshLayout swipeRefresh;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final TextView textEmpty;

  @NonNull
  public final TextView textRankHeader;

  @NonNull
  public final TextView textScoreHeader;

  @NonNull
  public final TextView textUserHeader;

  private FragmentLeaderboardBinding(@NonNull ConstraintLayout rootView,
      @NonNull CardView cardHeader, @NonNull Guideline guideline, @NonNull ProgressBar progressBar,
      @NonNull RecyclerView recyclerLeaderboard, @NonNull SwipeRefreshLayout swipeRefresh,
      @NonNull TabLayout tabLayout, @NonNull TextView textEmpty, @NonNull TextView textRankHeader,
      @NonNull TextView textScoreHeader, @NonNull TextView textUserHeader) {
    this.rootView = rootView;
    this.cardHeader = cardHeader;
    this.guideline = guideline;
    this.progressBar = progressBar;
    this.recyclerLeaderboard = recyclerLeaderboard;
    this.swipeRefresh = swipeRefresh;
    this.tabLayout = tabLayout;
    this.textEmpty = textEmpty;
    this.textRankHeader = textRankHeader;
    this.textScoreHeader = textScoreHeader;
    this.textUserHeader = textUserHeader;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLeaderboardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLeaderboardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_leaderboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLeaderboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardHeader;
      CardView cardHeader = ViewBindings.findChildViewById(rootView, id);
      if (cardHeader == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.recyclerLeaderboard;
      RecyclerView recyclerLeaderboard = ViewBindings.findChildViewById(rootView, id);
      if (recyclerLeaderboard == null) {
        break missingId;
      }

      id = R.id.swipeRefresh;
      SwipeRefreshLayout swipeRefresh = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefresh == null) {
        break missingId;
      }

      id = R.id.tabLayout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.textEmpty;
      TextView textEmpty = ViewBindings.findChildViewById(rootView, id);
      if (textEmpty == null) {
        break missingId;
      }

      id = R.id.textRankHeader;
      TextView textRankHeader = ViewBindings.findChildViewById(rootView, id);
      if (textRankHeader == null) {
        break missingId;
      }

      id = R.id.textScoreHeader;
      TextView textScoreHeader = ViewBindings.findChildViewById(rootView, id);
      if (textScoreHeader == null) {
        break missingId;
      }

      id = R.id.textUserHeader;
      TextView textUserHeader = ViewBindings.findChildViewById(rootView, id);
      if (textUserHeader == null) {
        break missingId;
      }

      return new FragmentLeaderboardBinding((ConstraintLayout) rootView, cardHeader, guideline,
          progressBar, recyclerLeaderboard, swipeRefresh, tabLayout, textEmpty, textRankHeader,
          textScoreHeader, textUserHeader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
